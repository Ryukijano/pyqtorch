from __future__ import annotations

import math

import pytest
import torch

import pyqtorch as pyq
from pyqtorch.matrices import (
    IMAT,
    ZMAT,
)
from pyqtorch.primitive import Primitive


@pytest.mark.parametrize(
    "projector, exp_projector_mat",
    [
        (
            pyq.Projector(0, bra="1", ket="1"),
            torch.tensor(
                [[0.0 + 0.0j, 0.0 + 0.0j], [0.0 + 0.0j, 1.0 + 0.0j]],
                dtype=torch.complex128,
            ),
        ),
        (
            pyq.Projector(bra="10", ket="01", qubit_support=(1, 2)),
            torch.tensor(
                [
                    [
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                    ],
                    [
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        1.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                    ],
                    [
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                    ],
                    [
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                    ],
                    [
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                    ],
                    [
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        1.0 + 0.0j,
                        0.0 + 0.0j,
                    ],
                    [
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                    ],
                    [
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                        0.0 + 0.0j,
                    ],
                ],
                dtype=torch.complex128,
            ),
        ),
        (
            pyq.N(0),
            (IMAT - ZMAT) / 2.0,
        ),
        (
            pyq.CNOT(0, 1),
            torch.tensor(
                [
                    [
                        [1.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j],
                        [0.0 + 0.0j, 1.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j],
                        [0.0 + 0.0j, 0.0 + 0.0j, 0.0 + 0.0j, 1.0 + 0.0j],
                        [0.0 + 0.0j, 0.0 + 0.0j, 1.0 + 0.0j, 0.0 + 0.0j],
                    ]
                ],
                dtype=torch.complex128,
            ),
        ),
        (
            pyq.CZ(control=(0, 1), target=2),
            torch.tensor(
                [
                    [
                        [
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            -1.0 + 0.0j,
                        ],
                    ]
                ],
                dtype=torch.complex128,
            ),
        ),
        (
            pyq.CRX(control=(0, 1), target=2, param_name="theta"),
            torch.tensor(
                [
                    [
                        1.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                    ],
                    [
                        0.0000 + 0.0000j,
                        1.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                    ],
                    [
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        1.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                    ],
                    [
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        1.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                    ],
                    [
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        1.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                    ],
                    [
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        1.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                    ],
                    [
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.8776 + 0.0000j,
                        0.0000 - 0.4794j,
                    ],
                    [
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 + 0.0000j,
                        0.0000 - 0.4794j,
                        0.8776 + 0.0000j,
                    ],
                ],
                dtype=torch.complex128,
            ),
        ),
        (
            pyq.Toffoli(control=(0, 1), target=2),
            torch.tensor(
                [
                    [
                        [
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                        ],
                        [
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            0.0 + 0.0j,
                            1.0 + 0.0j,
                            0.0 + 0.0j,
                        ],
                    ]
                ],
                dtype=torch.complex128,
            ),
        ),
    ],
)
def test_projector_tensor(
    projector: Primitive, exp_projector_mat: torch.Tensor, vals: torch.Tensor = None
) -> None:

    nbqubits = int(math.log2(exp_projector_mat.shape[-1]))
    projector_mat = projector.tensor(
        n_qubits=nbqubits, values={"theta": torch.Tensor([1.0])}
    ).squeeze(-1)
    assert torch.allclose(projector_mat, exp_projector_mat, atol=1.0e-4)


def test_circuit_tensor() -> None:
    ops = [pyq.RX(0, "theta_0"), pyq.RY(0, "theta_1"), pyq.RX(1, "theta_2")]
    circ = pyq.QuantumCircuit(2, ops)
    values = {f"theta_{i}": torch.Tensor([float(i)]) for i in range(3)}
    tensorcirc = circ.tensor(values)
    assert tensorcirc.size() == (4, 4, 1)
    assert torch.allclose(
        tensorcirc,
        torch.tensor(
            [
                [
                    [0.4742 + 0.0000j],
                    [0.0000 - 0.7385j],
                    [-0.2590 + 0.0000j],
                    [0.0000 + 0.4034j],
                ],
                [
                    [0.0000 - 0.7385j],
                    [0.4742 + 0.0000j],
                    [0.0000 + 0.4034j],
                    [-0.2590 + 0.0000j],
                ],
                [
                    [0.2590 + 0.0000j],
                    [0.0000 - 0.4034j],
                    [0.4742 + 0.0000j],
                    [0.0000 - 0.7385j],
                ],
                [
                    [0.0000 - 0.4034j],
                    [0.2590 + 0.0000j],
                    [0.0000 - 0.7385j],
                    [0.4742 + 0.0000j],
                ],
            ],
            dtype=torch.complex128,
        ),
        atol=1.0e-4,
    )
